# Global Travis CI step definitions that will be used by all jobs unless
# explicitly overriden in the jobs.include matrix.

language: python
dist: xenial
python: "3.6"

services:
  - redis-server

addons:
  postgresql: "10"

install: pip install tox

script: tox -e $TOX_ENV

# Build stages.
jobs:
  include:
    - stage: test
      env:
        - TOX_ENV=py36
        # Set environment variables with information how to use the required
        # services.
        - DRFR_POSTGRESQL_USER=postgres
        - DRFR_POSTGRESQL_PORT=5432
        - DRFR_REDIS_PORT=6379
    - stage: test
      python: "3.7"
      env:
        - TOX_ENV=py37
        # Set environment variables with information how to use the required
        # services.
        - DRFR_POSTGRESQL_USER=postgres
        - DRFR_POSTGRESQL_PORT=5432
        - DRFR_REDIS_PORT=6379
    - stage: test
      python: "3.8"
      env:
        - TOX_ENV=py38
        # Set environment variables with information how to use the required
        # services.
        - DRFR_POSTGRESQL_USER=postgres
        - DRFR_POSTGRESQL_PORT=5432
        - DRFR_REDIS_PORT=6379
    - stage: test
      python: "3.9"
      env:
        - TOX_ENV=py39
        # Set environment variables with information how to use the required
        # services.
        - DRFR_POSTGRESQL_USER=postgres
        - DRFR_POSTGRESQL_PORT=5432
        - DRFR_REDIS_PORT=6379

    # NOTE: We undo almost all global Travis CI step definitions to ensure the
    # following Tox environments are run without access to any service.
    - stage: test
      env: TOX_ENV=docs
      services: []
      addons: {}
    - stage: test
      env: TOX_ENV=linters
      services: []
      addons: {}
    - stage: test
      env: TOX_ENV=packaging
      services: []
      addons: {}

    # NOTE: We undo many global Travis CI step definitions to ensure the
    # following Tox environment only has access to the PostgreSQL service.
    - stage: test
      env:
        - TOX_ENV=migrations
        # Set environment variables with information how to use the PostgreSQL
        # service.
        - DRFR_POSTGRESQL_USER=postgres
        - DRFR_POSTGRESQL_PORT=5432
      services:
        - postgresql

    # NOTE: We undo/change all the global Travis CI step definitions to ensure
    # building of source and wheel distributions is performed in a clean
    # environment.
    - stage: release
      services: []
      addons: {}
      # Project uses setuptools_scm to determine the version from a SCM tag.
      install: pip install setuptools_scm
      script: skip
      deploy:
        provider: pypi
        user: genialis-bot
        password:
          secure: "JAoW5AfnW3l+stMUeiTz6TYFykC0XE0muKaWUBdx9kOZ2taZmLSXYx3MOaojfUn3pE3VZG7fcPtRHO66XszHRPhXL5A6ap+Lcc8GGw++PBZ7hyeR9djhuZaEo8kvPzDcMgQZ3GqW3qj4o8euUmfuRhE1AsEyinCinkz6/kfjbBhJExWWh+MSx7t9PaxZK6na/7Zwnb2O5ANCKQsFxLWlWj8pxAtj/oa9rwR60eY0GUIzEZxuYRTOhhMWCIqwITfnGyGUv1KSgHP7dmkcns4XiHUX2pJ8aBcCLZW9TOsOO4W7Gb9RKjdgSsjS2iCkogbQ5KU+GFhHy7dn9EyycihEGyYOwLHi+w52rkA2hJItg3jra31FYL18wCdMDDvsCJK8i0SJJi6YvqshRS4vZqeoFSRt5tU8osiGGTnxkbLXq/IwNIEYSlrmHUdvtINenSeaAY7P/WDBKrBp3nz5cPHGwW/pMwTtK/8Wz4aNOe6PJoD/OxF7WPcI0RqrsnOohR7wnDTUxdVFZD/2f5A8iqLwUV+MwXnWiqT3pfNBg+P/xw/7sDNIvxanLH86we85+ut9Y/ztou8DRMH5pjtzHK9W4wlSMHLbFrlNBu5PHea8ACVXi5WGHJGS0qqZ8GS/6nHw2XMMBt7puqqDXumI8iDxcT9Vi7rqLeerKn6CnJPvWlg="
        distributions: sdist bdist_wheel
        on:
          # Enable deploying tags. By default, Travis CI only deploys from the
          # master branch.
          tags: true
      # Only build releases for tags starting with a Semantic Versioning 2.0
      # compatible version.
      if: tag =~ ^\d+\.\d+\.\d+
